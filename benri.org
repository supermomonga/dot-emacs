#+TITLE: benri.org
#+AUTHOR: supermomonga
#+LANGUAGE: ja
#+OPTIONS: toc:2 num:nil ^:nil

This is my kanari sugoi =benri.el= file (kanari).

* Use common lisp package

#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC

* User-defined macro and function

** Handle path variables benrily
#+BEGIN_SRC emacs-lisp
(defun append-path (path)
  (setenv "PATH" (concat (file-truename path) ":" (getenv "PATH")))
  (apply-path))

(defun prepend-path (path)
  (setenv "PATH" (concat (getenv "PATH") ":" (file-truename path)))
  (apply-path))

(defun apply-path ()
  ;;; eshell
  (setq eshell-path-env (getenv "PATH"))
  ;;; exec path
  (setq exec-path (split-string (getenv "PATH") ":")))
#+END_SRC

** Mac OS X Notification Center
#+BEGIN_SRC emacs-lisp
(defun notif (title message)
  (shell-command
   (concat
    "echo 'display notification \"'"
    message
    "'\" with title \""
    title
    "\"' | osascript"))
  )
#+END_SRC

* Add some pathes
#+BEGIN_SRC emacs-lisp
;; rbenv
(append-path "~/.rbenv/bin/")
(append-path "~/.rbenv/shims/")

;; Homebrew toka.
(append-path "/usr/local/bin")

;; golang
(setenv "GOPATH" (file-truename "~/.go"))
(setenv "PAGER" "")
(setenv "TERM" "xterm-256color")
(append-path (concat (getenv "GOPATH") "/bin"))
(append-path "/usr/local/Cellar/go/1.3.3/bin")
#+END_SRC

* Load secret settings
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/secret.el" nil t)
#+END_SRC

* Behavior
#+BEGIN_SRC emacs-lisp
;; Emacsclient
(when (require 'server nil t)
 (unless (server-running-p)
  (server-start)))

;; Highlight current line
(global-hl-line-mode 1)

;; Disable startup message
(setq inhibit-startup-message t)

;; Open file when drag and frop files from another applications
(define-key global-map [ns-drag-file] 'ns-find-file)

;; Symply use y/n to select yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; Don't create backup files
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)
#+END_SRC

* Appearance
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(spaces tabs space-mark tab-mark))
(setq whitespace-display-mappings
      '(
  ;; (space-mark 32 [183] [46]) ; normal space, ·
        (space-mark 160 [164] [95])
        (space-mark 2208 [2212] [95])
        (space-mark 2336 [2340] [95])
        (space-mark 3616 [3620] [95])
        (space-mark 3872 [3876] [95])
        (space-mark ?\x3000 [?\□]) ;; Zenkaku space [　]
        (tab-mark ?\t [?\x276F ?\t] [?\\ ?\t]) ; tab, ❯ [	]
        ))
(global-whitespace-mode 1)

;; Show trailing whitespaces
(setq-default show-trailing-whitespace t)

;; Transparent window
;; (set-frame-parameter (selected-frame) 'alpha '(100 100))

;; Hide toolbar
(tool-bar-mode 0)

;; Hide scrollbar
(set-scroll-bar-mode nil)

;; (column-number-mode t)

;; Show line number
;; (global-linum-mode t)

;; Window transparency
;; (set-frame-parameter nil 'alpha 97)


;; hex color
(defvar hexcolor-keywords
  '(("#[ABCDEFabcdef0-9]\\{3,6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))

(defun hexcolor-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolor-keywords))

(add-hook 'css-mode-hook 'hexcolor-add-to-font-lock)
(add-hook 'emacs-lisp-mode-hook 'hexcolor-add-to-font-lock)


;; Show empty line marker
(setq indicate-empty-lines t)
#+END_SRC

* Language

#+BEGIN_SRC emacs-lisp
;; Use japanese
(set-language-environment 'Japanese)

;; Use UTF-8 as possible as can
(prefer-coding-system 'utf-8)
#+END_SRC

* Edit

#+BEGIN_SRC emacs-lisp
;; Save cursor position
(when (require 'saveplace' nil t)
  (setq-default save-place t))

;; Automatically insert newline
(setq require-final-newline t)

;; Tab width
(setq-default tab-width 2)
(setq default-tab-width 2)
(setq tab-stop-list '(2 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                      64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

;; enable eldoc
(when (require 'eldoc nil t)
  (eldoc-mode t)
  (setq eldoc-idle-delay 0.2)
  (setq eldoc-echo-area-use-multiline-p t))


;; Recentf file
(setq recentf-max-saved-items 100000)
(setq history-length 100000)


;; auto insert
(require 'autoinsert nil t)
(auto-insert-mode t)
(setq auto-insert-directory "~/.emacs.d/templates/")
#+END_SRC

* Font

  |----------------+------------------------------------|
  | Language       | Sample Text                        |
  |----------------+------------------------------------|
  | Japanese       | あのイーハトーヴォの               |
  |                | すきとおった風、                   |
  |                | 夏でも底に冷たさをもつ青いそら、   |
  |                | うつくしい森で飾られたモーリオ市、 |
  |                | 郊外のぎらぎらひかる草の波。       |
  | Chinese        | 祇辻飴葛蛸鯖鰯噌庖箸               |
  | English        | ABCDEFGHIJKLM                      |
  |                | abcdefghijklm                      |
  | Digit          | 1234567890                         |
  | Zenkaku Symbol | ┏┓┗┛                           |
  | Symbol         | Dingbats: [❯][☯][♞][☎]             |
  | Russian        | русский язык            |
  |----------------+------------------------------------|


  #+BEGIN_SRC emacs-lisp
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t)
  (setq font-lock-support-mode 'jit-lock-mode))

(create-fontset-from-ascii-font "Source Code Pro Light-14:weight=normal:slant=normal" nil "september")

;; Symbola font: http://users.teilar.gr/~g1951d/
(set-fontset-font "fontset-september" '(#x2700 . #x27BF) (font-spec :family "Symbola" :size 14) nil 'append)
(set-fontset-font "fontset-september" 'japanese-jisx0208 (font-spec :family "September" :size 14) nil 'append)
(set-fontset-font "fontset-september" 'katakana-jisx0201 (font-spec :family "September" :size 14) nil 'append) ;; hankaku kana
(add-to-list 'default-frame-alist '(font . "fontset-september"))
#+END_SRC

* Package config
** el-get
#+BEGIN_SRC emacs-lisp
;; package manager config for el-get.
;; Note that el-get depends on package.el.
(require 'package)

;;; Add MELPA repository
(add-to-list 'package-archives
 '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; Update load-path to load plugins which managed by el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

;; Install el-get if it's not installed.
(unless (require 'el-get nil t)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp)))
    (el-get-elpa-build-local-recipes)
    (el-get-emacswiki-build-local-recipes))
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
;; Behavior
(setq evil-search-module 'evil-search)
;; Don't use emacs-state in any modes
(setq evil-emacs-state-modes nil)

(el-get 'sync 'evil)
(el-get 'sync 'evil-indent-textobject)
;; (el-get 'sync 'evil-leader)
(el-get 'sync 'evil-matchit)
(el-get 'sync 'evil-nerd-commenter)
(el-get 'sync 'evil-numbers)
(el-get 'sync 'evil-paredit)
(el-get 'sync 'evil-surround)

(when (require 'evil nil t)
      (evil-mode 1)
      ;; keymap
      (define-key evil-normal-state-map (kbd "C-h") #'(lambda ()
                    (interactive)
                    (evil-insert-state)
                    (insert-string " ")
                    (evil-normal-state)))
      (define-key evil-normal-state-map (kbd "C-l") #'(lambda ()
                    (interactive)
                    (evil-insert-state)
                    (insert-string " ")
                    (evil-normal-state)
                    (evil-forward-char)
                    ))
      (define-key evil-normal-state-map (kbd "|") 'evil-window-vsplit)
      (define-key evil-normal-state-map (kbd "_") 'evil-window-split)
      (define-key evil-motion-state-map (kbd ";") 'evil-ex)
      (define-key evil-insert-state-map (kbd "C-k") 'kill-line)
      (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

      ;;; bind escape key to cancel or go back to normal state
      (defun evil-escape-or-quit (&optional prompt)
        (interactive)
        (cond
         ((or (evil-normal-state-p) (evil-insert-state-p) (evil-visual-state-p)
              (evil-replace-state-p) (evil-visual-state-p)) (kbd "<escape>"))
         (t (kbd "C-g"))))
      (define-key key-translation-map (kbd "s-w") #'evil-escape-or-quit)
      (define-key evil-operator-state-map (kbd "s-w") #'evil-escape-or-quit)
      (keyboard-translate ?\e ?\s-w)
      ;; (define-key key-translation-map (kbd "ESC") #'evil-escape-or-quit)
      ;; (define-key evil-operator-state-map (kbd "ESC") #'evil-escape-or-quit)


      ;; specific mode
      ;; (evil-set-initial-state 'eshell-mode 'emacs)
      ;; Fix cursor color
      (setq evil-default-cursor t)
      (set-cursor-color "#FFFFFF")
      )

(when (require 'evil-nerd-commenter nil t)
  (define-key evil-normal-state-map (kbd "C-- C--") 'evilnc-comment-or-uncomment-lines))

(when (require 'surround nil t)
      (global-surround-mode 1))

(when (require 'evil-matchit nil t)
  (global-evil-matchit-mode 1))

(when (require 'evil-elscreen nil t)
)
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local ac-sources (append my-ac-sources '(
              ac-source-functions
              ac-source-symbols
              ac-source-variables
            )))))
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'yasnippet)
(el-get 'sync 'dropdown-list)

(when (require 'yasnippet nil t)
        (require 'dropdown-list nil t)
        (setq yas-prompt-functions '(yas-dropdown-prompt yas-completing-prompt yas-ido-prompt yas-no-prompt))
        (add-to-list 'yas-snippet-dirs "~/.emacs.d/el-get/yasnippet-golang")
        (yas-global-mode 1))
#+END_SRC
** helm

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'helm)
(el-get 'sync 'helm-descbinds)
(when (require 'helm nil t)
      (define-key evil-normal-state-map (kbd "SPC f") 'helm-mini)
      (define-key evil-normal-state-map (kbd "SPC b") 'helm-buffers-list)
      (define-key evil-normal-state-map (kbd "SPC SPC") 'helm-M-x)
      (define-key evil-normal-state-map (kbd "SPC s") 'helm-yas-complete)
      )

(when (require 'helm-descbinds nil t)
)
#+END_SRC
** auto-complete

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'auto-complete)


(when (require 'auto-complete nil t)
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (ac-config-default)
  (setq ac-use-menu-map t)
  (setq ac-menu-height 20)
  ;; (print ac-modes)
  ;; (set-face-background 'ac-candidate-face "lightgray")
  ;; (set-face-underline 'ac-candidate-face "darkgray")
  ;; (set-face-background 'ac-selection-face "steelblue")
  ;; (print ac-use-quick-help)
  ;; (setq ac-quick-help-prefer-x t)
  (setq ac-quick-help-delay 0.0)
  ;; ac-sources
  (defvar my-ac-sources
    '(ac-source-yasnippet
      ac-source-abbrev
      ac-source-dictionary
      ac-source-words-in-same-mode-buffers))
  (add-to-list 'ac-sources 'ac-source-yasnippet)
  (add-to-list 'ac-modes 'eshell-mode)
  (add-to-list 'ac-modes 'coffee-mode)
  (add-to-list 'ac-modes 'clojure-mode)
  (add-to-list 'ac-modes 'go-mode)
  (add-to-list 'ac-modes 'ruby-mode)
  (add-to-list 'ac-modes 'org-mode)
  ;; (print ac-sources)
  ;; (evil-define-key 'normal eshell-mode-map (kbd "C-M-i") 'auto-complete)
  ;; (evil-define-key 'insert eshell-mode-map (kbd "C-M-i") 'auto-complete)
  )
#+END_SRC

** smartrep

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'smartrep)
(el-get 'sync 'tabbar)

(defun smart-forward-buffer ()
  (cond ((tabbar-mode-on-p) (tabbar-forward-tab))
        ((e2wm:managed-p) (e2wm:pst-history-back-command))))

(defun smart-backward-buffer ()
  (cond ((tabbar-mode-on-p) (tabbar-backward-tab))
        ((e2wm:managed-p) (e2wm:pst-history-forward-command))))

(when (require 'smartrep nil t)
  (smartrep-define-key evil-normal-state-map "C-w"
    '((">" . 'evil-window-increase-width)
      ("<" . 'evil-window-decrease-width)
      ("+" . 'evil-window-increase-height)
      ("-" . 'evil-window-decrease-height)))
  (smartrep-define-key evil-normal-state-map "C-c"
    '(("+" . 'evil-numbers/inc-at-pt)
      ("-" . 'evil-numbers/dec-at-pt)))
  (when (require 'tabbar nil t)
    (smartrep-define-key evil-normal-state-map "g"
      '(("t" . 'smart-forward-buffer)
        ("T" . 'smart-backward-buffer)))
    )
)
#+END_SRC

** tabbar

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'tabbar)


(when (require 'tabbar nil t)
  (tabbar-mode 1)
  (tabbar-mwheel-mode -1)
  (setq tabbar-buffer-groups-function nil)
  (dolist (btn '(tabbar-buffer-home-button tabbar-scroll-left-button tabbar-scroll-right-button))
    (set btn (cons (cons "" nil) (cons "" nil))))
  ;; (setq tabbar-auto-scroll-flag nil)
  (setq tabbar-separator '(1.0))
  ;;;
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(tabbar-background-color "#323232")
   '(tabbar-cycle-scope (quote tabs)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(tabbar-default ((t (:background "#424242" :foreground "#999" :height 0.9))))
   '(tabbar-unselected ((t (:background "#424242" :foreground "#999" :height 0.9))))
   '(tabbar-selected ((t (:background "#424242" :foreground "#fff" :height 0.9))))
   '(tabbar-button ((t (:background "#424242" :foreground "#999"))))
   '(tabbar-button-highlight ((t (:background "#424242" :foreground "#999"))))
   '(tabbar-modified ((t (:background "#424242" :foreground "#999" :height 0.9))))
   '(tabbar-separator ((t (:background "#424242" :height 1.0)))))
  ;;;
  ;; (set-face-attribute 'tabbar-default    nil :background "#323232" :foreground "#999999" :family "September" :height 0.9 :box nil)
  ;; (set-face-attribute 'tabbar-default    nil :background "#323232" :foreground "#999999" :height 0.9 :box nil)
  ;; (set-face-attribute 'tabbar-unselected nil :background "#424242" :foreground "#999999" :box nil)
  ;; (set-face-attribute 'tabbar-selected   nil :background "#424242" :foreground "#ffffff" :box nil)
  ;; (set-face-attribute 'tabbar-button nil :box nil)
  ;; (set-face-attribute 'tabbar-separator nil :height 1.0 :background "#424242")
  (defvar my-tabbar-show-buffers
    '("*Faces*" "*vc-" "*eshell*" "*Lingr Status*"))
  (defvar my-tabbar-hide-buffers
    '("*" "Lingr["))
  (defun my-tabbar-buffer-list ()
    ;; (let* ((hides (list ?\  ?\*))
    (let* ((hides (regexp-opt my-tabbar-hide-buffers))
     (shows (regexp-opt my-tabbar-show-buffers))
     (cur-buf (current-buffer))
     (tabs (delq
      nil
      (mapcar (lambda (buf)
          (let ((name (buffer-name buf)))
            (when (or (string-match shows name)
                (not (string-match hides name)))
              buf)))
        (buffer-list)))))
      (if (memq cur-buf tabs) tabs (cons cur-buf tabs))))
  (setq tabbar-buffer-list-function 'my-tabbar-buffer-list)
  )
#+END_SRC

** theme

#+BEGIN_SRC emacs-lisp
(add-to-list 'el-get-sources
             '(:name railscasts-theme
                     :type github
                     :website "https://github.com/itiut/railscasts-theme"
                     :description "Railscasts color theme for GNU Emacs 24"
                     :pkgname "itiut/railscasts-theme")

             )
(add-to-list 'el-get-sources
             '(:name replace-colorthemes
         :type github
         :website "https://github.com/emacs-jp/replace-colorthemes"
         :description "Replace color-theme with Emacs theme framework"
         :pkgname "emacs-jp/replace-colorthemes")

       )


(when (require 'helm-themes nil t)
)
(el-get 'sync 'replace-colorthemes)
(when (require 'replace-colorthemes nil t)
  (add-to-list 'custom-theme-load-path
         (file-name-as-directory "~/.emacs.d/el-get/replace-colorthemes/"))
  (load-theme 'desert t nil))

(el-get 'sync 'railscasts-theme)
(when (require 'railscasts-theme nil t)
  (add-to-list 'custom-theme-load-path
         (file-name-as-directory "~/.emacs.d/el-get/railscasts-theme/"))
  (load-theme 'railscasts t nil))




;; (enable-theme 'desert)
(enable-theme 'railscasts)

(set-face-background 'default "#2b2b2b")
(set-face-background 'fringe "#2b2b2b")
(set-face-foreground 'vertical-border "#414141")
(set-face-background 'highlight "#3c3c3c")
(set-face-foreground 'highlight nil)
(set-face-background 'region "#6c6c6c")
(set-face-foreground 'region nil)
(set-face-attribute hl-line-face nil :underline nil)
(set-cursor-color "#FFFFFF")
#+END_SRC

** eshell

*** key mappings

#+BEGIN_SRC emacs-lisp
;; normal-state map
(evil-define-key 'normal eshell-mode-map (kbd "C-k") 'eshell-previous-prompt)
(evil-define-key 'normal eshell-mode-map (kbd "C-j") 'eshell-next-prompt)
(evil-define-key 'normal eshell-mode-map (kbd "C-p") 'eshell-previous-prompt)
(evil-define-key 'normal eshell-mode-map (kbd "C-n") 'eshell-next-prompt)
(evil-define-key 'normal eshell-mode-map (kbd "i") 'evilshell/insert-state)
(evil-define-key 'normal eshell-mode-map (kbd "0") 'eshell-bol)

;; insert-state map
(evil-define-key 'insert eshell-mode-map (kbd "C-p") 'eshell-previous-matching-input-from-input)
(evil-define-key 'insert eshell-mode-map (kbd "C-n") 'eshell-next-matching-input-from-input)
;;; Need to define those two keybinds to overwrite TAB key
(evil-define-key 'insert eshell-mode-map (kbd "C-i") 'auto-complete)
(evil-define-key 'insert eshell-mode-map (kbd "<tab>") 'auto-complete)
#+END_SRC

*** Startup message

#+BEGIN_SRC emacs-lisp

;; Startup message
;; (setq eshell-banner-message "
;; 萌えるエディタは正義の印！！（ﾋﾞﾑｲ〜ﾝ）
;; 卑劣な環境を打ち砕く！！｡ﾟ+.*(+･｀ω･)9
;; びびびびびびび びむびむーっ！(」*ﾟﾛﾟ)」
;; びびび びむびむーっ！(」*ﾟﾛﾟ)」*ﾟﾛﾟ)」
;; ｊｋｊｋｊｋｊｋ 大好き～っ☆⌒ヽ(*'､＾*)
;; ビムで世界中シ・ア・ワ・セ☆(b^ｰﾟ)
;; ")

#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
;; Theme
(custom-set-faces
 '(eshell-prompt ((t (:foreground "#CC7833" :weight normal))))
)

#+END_SRC

*** auto-complete integration

#+BEGIN_SRC emacs-lisp
(require 'pcomplete)
(defun ac-pcomplete ()
  ;; eshell uses `insert-and-inherit' to insert a \t if no completion
  ;; can be found, but this must not happen as auto-complete source
  (flet ((insert-and-inherit (&rest args)))
    ;; this code is stolen from `pcomplete' in pcomplete.el
    (let* (tramp-mode ;; do not automatically complete remote stuff
           (pcomplete-stub)
           (pcomplete-show-list t) ;; inhibit patterns like * being deleted
           pcomplete-seen pcomplete-norm-func
           pcomplete-args pcomplete-last pcomplete-index
           (pcomplete-autolist pcomplete-autolist)
           (pcomplete-suffix-list pcomplete-suffix-list)
           (candidates (pcomplete-completions))
           (beg (pcomplete-begin))
           ;; note, buffer text and completion argument may be
           ;; different because the buffer text may bet transformed
           ;; before being completed (e.g. variables like $HOME may be
           ;; expanded)
           (buftext (buffer-substring beg (point)))
           (arg (nth pcomplete-index pcomplete-args)))
      ;; we auto-complete only if the stub is non-empty and matches
      ;; the end of the buffer text
      (when (and (not (zerop (length pcomplete-stub)))
                 (or (string= pcomplete-stub ; Emacs 23
                              (substring buftext
                                         (max 0
                                              (- (length buftext)
                                                 (length pcomplete-stub)))))
                     (string= pcomplete-stub ; Emacs 24
                              (substring arg
                                         (max 0
                                              (- (length arg)
                                                 (length pcomplete-stub)))))))
        ;; Collect all possible completions for the stub. Note that
        ;; `candidates` may be a function, that's why we use
        ;; `all-completions`.
        (let* ((cnds (all-completions pcomplete-stub candidates))
               (bnds (completion-boundaries pcomplete-stub
                                            candidates
                                            nil
                                            ""))
               (skip (- (length pcomplete-stub) (car bnds))))
          ;; We replace the stub at the beginning of each candidate by
          ;; the real buffer content.
          (mapcar #'(lambda (cand) (concat buftext (substring cand skip)))
                  cnds))))))
(ac-define-source pcomplete
  '((candidates . ac-pcomplete)))


#+END_SRC

*** Hook

#+BEGIN_SRC emacs-lisp

(add-hook 'eshell-mode-hook
          (lambda ()
            (setq-local ac-sources '(
              ac-source-pcomplete
              ac-source-functions
              ac-source-symbols
              ac-source-variables
            ))
            (setq-local ac-auto-start nil)
            (evil-define-key 'insert ac-mode-map (kbd "TAB") 'auto-complete)
            (setq-local show-trailing-whitespace nil)))
#+END_SRC

*** set some env variables

#+BEGIN_SRC emacs-lisp
(setenv "PAGER" "")
(setenv "TERM" "xterm-256color")
#+END_SRC

*** Treat escape sequence and ANSI color

#+BEGIN_SRC emacs-lisp

;; Escape sequence
(autoload 'ansi-color-for-comint-mode-on "ansi-color"
          "Set `ansi-color-for-comint-mode' to t." t)
(add-hook 'eshell-load-hook 'ansi-color-for-comint-mode-on)

(add-hook 'eshell-preoutput-filter-functions
          'ansi-color-filter-apply)

;; ANSI color
(require 'ansi-color)
(require 'eshell)
(defun eshell-handle-ansi-color ()
      (ansi-color-apply-on-region eshell-last-output-start
                                  eshell-last-output-end))
    (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)

#+END_SRC

*** Launch eshell after initialize emacs

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda() (eshell)))
#+END_SRC

*** Aliases

#+BEGIN_SRC emacs-lisp

(setq eshell-command-aliases-list '())
(add-to-list 'eshell-command-aliases-list (list "op" "open ."))
(add-to-list 'eshell-command-aliases-list (list "ls" "ls -la"))
(add-to-list 'eshell-command-aliases-list (list "e" "find-file $1"))
;; Ruby bundler
(add-to-list 'eshell-command-aliases-list (list "be" "bundle exec $1"))
(add-to-list 'eshell-command-aliases-list (list "bi" "bundle install"))
(add-to-list 'eshell-command-aliases-list (list "bu" "bundle update"))
;; Git
(add-to-list 'eshell-command-aliases-list (list "git" "gh $1"))
(add-to-list 'eshell-command-aliases-list (list "gb" "git browse"))
(add-to-list 'eshell-command-aliases-list (list "gs" "git status"))
(add-to-list 'eshell-command-aliases-list (list "ga" "git add $1"))
(add-to-list 'eshell-command-aliases-list (list "gd" "git diff"))
(add-to-list 'eshell-command-aliases-list (list "gc" "git commit $1"))
(add-to-list 'eshell-command-aliases-list (list "gcm" "git commit -m $1"))
(add-to-list 'eshell-command-aliases-list (list "gcam" "git commit -am $1"))
#+END_SRC

*** Prompt

#+BEGIN_SRC emacs-lisp

(setq eshell-prompt-regexp "^[~/].* ❯ ")
(setq eshell-prompt-function (lambda ()
             (concat
        (abbreviate-file-name (eshell/pwd))
        " ❯ ")))

;; ;; (setq eshell-prompt-regexp "^\\([~/]?*$\\|❯ \\)")
;; (setq eshell-prompt-function (lambda ()
;;              (concat
;;         (abbreviate-file-name (eshell/pwd))
;;         "\n"
;;         "❯ ")))

;; (defcustom eshell-prompt-regexp-lastline "^❯ "
;;   "A regexp pattern of the last line of multi-line prompt"
;;   :type 'regexp
;;   :group 'eshell-prompt)

;; ;; Treat multi-line prompt
;; (defadvice eshell-skip-prompt (around eshell-skip-prompt-ext activate)
;;   (if (looking-at eshell-prompt-regexp)
;;       (re-search-forward eshell-prompt-regexp-lastline nil t)))
#+END_SRC

*** Functions

#+BEGIN_SRC emacs-lisp

;; cd
(defun evilshell/cd (dir)
  ;; Start eshell and move to home directory,
  ;; then enable insert state.
  (interactive)
  (eshell)
  (eshell/cd dir)
  (eshell-send-input)
  (evil-insert-state)
  (eshell-bol)
  )

;; don't allow cursor to move on the prompt
(defun evilshell/insert-state ()
  (interactive)
  (evil-insert-state)
  (eshell-bol)
)

#+END_SRC

** quickrun

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'quickrun)

(when (require 'quickrun nil t)
  (define-key evil-normal-state-map (kbd "SPC r") 'quickrun)
  )
#+END_SRC

** direx

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'direx)
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'flycheck)
(el-get 'sync 'flycheck-pos-tip)

(when (require 'flycheck nil t)
  (add-hook 'go-mode-hook 'flycheck-mode))

(with-eval-after-load 'flycheck
  (custom-set-variables
    '(flycheck-display-errors-function 'flycheck-pos-tip-error-messages)))
#+END_SRC

** e2wm

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'e2wm)


(when (require 'e2wm nil t)
        ;; keybinds
        ;;; Toggle e2wm
        (define-key evil-normal-state-map (kbd "SPC m")
          #'(lambda ()
              (interactive)
              (if (e2wm:managed-p)
                  (e2wm:stop-management)
                  (e2wm:start-management))))
        (evil-define-key nil e2wm:pst-minor-mode-keymap (kbd "<M-left>") 'e2wm:dp-code)
        (evil-define-key nil e2wm:pst-minor-mode-keymap (kbd "<M-right>") 'e2wm:dp-two)
        (evil-define-key nil e2wm:pst-minor-mode-keymap (kbd "<M-up>") 'e2wm:dp-dashboard)
        (evil-define-key nil e2wm:pst-minor-mode-keymap (kbd "<M-down>") 'e2wm:dp-doc)


;; its 80 chars
; ------------------------------------------------------------------------------
        (setq e2wm:c-code-recipe
              '(| (:left-max-size 30)
                  (- (:upper-size-ratio 0.7) files history)
                  (- (:upper-size-ratio 0.7)
                     (| (:right-max-size 35) main imenu)
                     sub)))
        (add-hook 'e2wm:def-plugin-files-mode-hook '(lambda ()
                                                      (buffer-face-set (font-face-attributes "Source Code Pro Light-12:weight=normal:slant=normal"))
                                                      ))
        (add-hook 'e2wm:def-plugin-imenu-mode-hook '(lambda ()
                                                      (buffer-face-set (font-face-attributes "Source Code Pro Light-12:weight=normal:slant=normal"))
                                                      ))

        (add-hook 'e2wm:pre-start-hook '(lambda () (tabbar-mode 0)))
        (add-hook 'e2wm:post-stop-hook '(lambda () (tabbar-mode t)))

        ;;; Plugin: Files
        ;;; e2wm:def-plugin-files-mode-map
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "RET") 'e2wm:def-plugin-files-select-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "SPC") 'e2wm:def-plugin-files-show-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "+") 'e2wm:def-plugin-files-mkdir-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "D") 'e2wm:def-plugin-files-open-dired-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "^") 'e2wm:def-plugin-files-updir-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "d") 'e2wm:def-plugin-files-delete-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "g") 'e2wm:def-plugin-files-update-by-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "h") 'e2wm:def-plugin-files-toggle-hidden-files-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "r") 'e2wm:def-plugin-files-rename-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "s") 'e2wm:def-plugin-files-sort-name-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "t") 'e2wm:def-plugin-files-sort-time-command)
        (evil-define-key 'normal e2wm:def-plugin-files-mode-map
          (kbd "z") 'e2wm:def-plugin-files-sort-size-command)
        ;;; e2wm:def-plugin-imenu-mode-map
        (evil-define-key 'normal e2wm:def-plugin-imenu-mode-map
          (kbd "RET") 'e2wm:def-plugin-imenu-jump-command)
        (evil-define-key 'normal e2wm:def-plugin-imenu-mode-map
          (kbd "SPC") 'e2wm:def-plugin-imenu-show-command)
        ;;; (print e2wm:def-plugin-history-list-mode-map)
)
#+END_SRC

** powerline

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'powerline)

(when (require 'powerline nil t)
        (custom-set-variables '(powerline-default-separator 'slant))
        (powerline-center-evil-theme)
)
#+END_SRC

** open-junk-file

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'open-junk-file)

(define-key evil-normal-state-map (kbd "SPC j") 'open-junk-file)
(setq open-junk-file-format "~/Documents/junk-files/%Y-%m/%Y-%m-%d-%H%M%S.")
(setq open-junk-file-find-file-function 'find-file)
#+END_SRC

** gist

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'gist)
(when (require 'gist nil t)
)
#+END_SRC

** popwin

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'popwin)
(when (require 'popwin nil t)
  (popwin-mode 1)
  (push '("helm" :regexp t) popwin:special-display-config)
  (push '("*Help*" :noselect t) popwin:special-display-config)
  (push '("*ruby*") popwin:special-display-config)
  (push '("*quickrun*") popwin:special-display-config)
  (push '("*twittering-edit*") popwin:special-display-config)
  (push '("*coffee-compiled*" :noselect t :height 0.5) popwin:special-display-config)
  (push '("*el-get packages*" :height 0.7) popwin:special-display-config)
  (push '(" *auto-async-byte-compile*" :noselect t :height 10) popwin:special-display-config)
  (push '("^\*go-direx:" :regexp t :position left :width 30 :dedicated t :stick t)
        popwin:special-display-config)
  ;; (evil-define-key 'normal popwin:keymap (kbd "C-q") 'popwin:close-popup-window)
)
#+END_SRC

** ruby

#+BEGIN_SRC emacs-lisp
;; Treat rbenv
(el-get 'sync 'rbenv)

;; Improved highlight, indent, and benri features like syntax checker.
(el-get 'sync 'Enhanced-Ruby-Mode)

;; auto insert `end` for block
(el-get 'sync 'ruby-end)

;; auto insert `end` for block
(el-get 'sync 'ruby-electric)

;; Highlight pair blocks
(el-get 'sync 'ruby-block)

(when (require 'rbenv nil t)
   )

(when (require 'Enhanced-Ruby-Mode nil t)
  (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
  (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
  )

(when (require 'ruby-block nil t)
  (ruby-block-mode t)
  (setq ruby-block-highlight-toggle t))

;; (when (require 'ruby-end t))

(add-hook 'enh-ruby-mode-hook '(lambda ()
                                 (when (require 'ruby-electric nil t)
                                   (ruby-electric-mode t))
                                 (add-to-list 'ac-sources 'ac-source-yasnippet)))


(when (require 'auto-complete nil t)
  (add-to-list 'ac-modes 'enh-ruby-mode))


;; template
(define-auto-insert "\.rb" "template.rb")
(define-auto-insert "Gemfile" "Gemfile")


;; Treat Gemfile as ruby script
(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
#+END_SRC

** elisp

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(show-paren-mode t)
#+END_SRC

** golang

#+BEGIN_SRC emacs-lisp
(add-to-list 'el-get-sources
             '(
               :name yasnippet-golang
                     :type github
                     :website "https://github.com/atotto/yasnippet-golang"
                     :description "emacs snippet (yasnippets) for golang"
                     :pkgname "atotto/yasnippet-golang")
             )

(el-get 'sync 'go-mode)
(el-get 'sync 'go-autocomplete)
(when (require 'direx nil t)
  (el-get 'sync 'go-direx))
(el-get 'sync 'go-def)
(el-get 'sync 'go-eldoc)
(el-get 'sync 'yasnippet-golang)


;; yas-snippet-dirs

(when (require 'auto-complete nil t)
  (add-to-list 'ac-modes 'go-mode))

(add-hook 'go-mode-hook '(lambda ()
                           (add-to-list 'ac-sources 'ac-source-yasnippet)
                           (setq tab-width 2)))

(add-hook 'before-save-hook 'gofmt-before-save)

(when (require 'go-direx nil t)
  (evil-define-key 'normal go-mode-map (kbd "SPC e") 'go-direx-pop-to-buffer))

(when (require 'go-eldoc nil t)
  ;; (set-face-attribute 'eldoc-highlight-function-argument nil
        ;;             :underline t :foreground "green"
        ;;             :weight 'bold)
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

** coffee_script

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'coffee-mode)
(el-get 'sync 'sourcemap)


;; This gives you a tab of 2 spaces
(custom-set-variables
 '(coffee-tab-width 2)
 '(coffee-args-compile '("-c" "-m")))

;; generating sourcemap
(add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)

(with-eval-after-load "coffee-mode"
  (evil-define-key 'normal coffee-mode-map (kbd "SPC r") 'coffee-compile-buffer))
#+END_SRC

** markdown

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'markdown-mode)

(add-to-list 'auto-mode-alist '("\\.mkd$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt$" . markdown-mode))
#+END_SRC

** mailer

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'wanderlust)


(when (require 'wanderlust nil t)
)
#+END_SRC

** lingr

#+BEGIN_SRC emacs-lisp
(el-get 'sync 'lingr)
(when (require 'lingr nil t)
  (setq lingr-username secret-lingr-username
        lingr-password secret-lingr-password
        lingr-icon-mode t
        lingr-image-convert-program "/usr/local/bin/convert"
        lingr-icon-fix-size 24
        )
  (evil-define-key 'normal lingr-room-map (kbd "j") 'lingr-room-next-nick)
  (evil-define-key 'normal lingr-room-map (kbd "k") 'lingr-room-previous-nick)
  (evil-define-key 'normal lingr-room-map (kbd "s") 'lingr-say-command)
  (evil-define-key 'normal lingr-room-map (kbd "r") 'lingr-refresh-room)
  (evil-define-key 'normal lingr-room-map (kbd "S-s") 'lingr-show-status)
  (evil-define-key 'normal lingr-room-map (kbd "C-j") 'lingr-room-next-message)
  (evil-define-key 'normal lingr-room-map (kbd "C-k") 'lingr-room-previous-message)
  ;; (evil-define-key 'normal lingr-status-buffer-map (kbd "C-RET") 'lingr-status-switch-room)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "RET") 'lingr-status-switch-room)
  ;; (evil-define-key 'normal lingr-status-buffer-map (kbd "RET") 'lingr-status-switch-room-other-window)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "n") 'lingr-room-next-message)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "p") 'lingr-room-previous-message)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "j") 'lingr-status-next-room)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "k") 'lingr-status-previous-room)
  (evil-define-key 'normal lingr-status-buffer-map (kbd "f") 'lingr-status-jump-message)
  ;; (evil-define-key 'insert lingr-status-buffer-map (kbd "C-RET") ')
  ;; (print lingr-say-buffer-map)
  (defun lingr-notif-message (message)
    (notif (concat "Lingr " (lingr-message-room message))
     (concat (lingr-message-nick message) ":" (lingr-message-text message))))
  (add-hook 'lingr-message-hook 'lingr-notif-message)
  )
#+END_SRC

** twitter

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal twittering-mode-map (kbd "SPC r") 'twittering-replies-timeline)
(evil-define-key 'normal twittering-mode-map (kbd "SPC h") 'twittering-home-timeline)
(evil-define-key 'normal twittering-mode-map (kbd "SPC d") 'twittering-direct-messages-timeline)
(evil-define-key 'normal twittering-mode-map (kbd "t") 'twittering-retweet)
(evil-define-key 'normal twittering-mode-map (kbd "v") 'twittering-other-user-timeline)
(evil-define-key 'normal twittering-mode-map (kbd "V") 'twittering-visit-timeline)
(evil-define-key 'normal twittering-mode-map (kbd "C-m") 'twittering-enter)
(evil-define-key 'normal twittering-mode-map (kbd "L") 'twittering-other-user-list-interactive)
(evil-define-key 'normal twittering-mode-map (kbd "j") 'twittering-goto-next-status)
(evil-define-key 'normal twittering-mode-map (kbd "k") 'twittering-goto-previous-status)
(evil-define-key 'normal twittering-mode-map (kbd "f") 'twittering-favorite)
(evil-define-key 'normal twittering-mode-map (kbd "a") 'twittering-toggle-activate-buffer)
(evil-define-key 'normal twittering-mode-map (kbd "i") 'twittering-icon-mode)
(evil-define-key 'normal twittering-mode-map (kbd "s") 'twittering-update-status-interactive)
(evil-define-key 'normal twittering-mode-map (kbd "u") 'twittering-push-uri-onto-kill-ring)
;; (evil-define-key 'normal twittering-mode-map (kbd "") 'twittering-)
;; (evil-define-key 'normal twittering-mode-map (kbd "") 'twittering-)
(evil-define-key 'normal twittering-edit-mode-map (kbd "<C-return>") 'twittering-edit-post-status)
(evil-define-key 'insert twittering-edit-mode-map (kbd "<C-return>") 'twittering-edit-post-status)

(setq twittering-status-format "%i %S(%s), %F  %@ from %f%L%r%R\n%FILL[     ]{%T}\n ")
(setq twittering-convert-fix-size 36)

(el-get 'sync 'twittering-mode)
(when (require 'twittering-mode nil t)
  (require 'epa-file)
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)
  (setq twittering-timer-interval 300)
  (add-hook 'twittering-mode-hook
            '(lambda () (setq-local show-trailing-whitespace nil))))

#+END_SRC

