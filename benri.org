#+TITLE: benri.org
#+OPTIONS: toc:2 num:nil ^:nil
#+LANGUAGE: ja

This is my kanari sugoi =benri.el= file (kanari).

* Use common lisp package

#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC

* User-defined macro and function

** Handle path variables benrily
#+BEGIN_SRC emacs-lisp
(defun append-path (path)
  (setenv "PATH" (concat (file-truename path) ":" (getenv "PATH")))
  (apply-path))

(defun prepend-path (path)
  (setenv "PATH" (concat (getenv "PATH") ":" (file-truename path)))
  (apply-path))

(defun apply-path ()
  ;;; eshell
  (setq eshell-path-env (getenv "PATH"))
  ;;; exec path
  (setq exec-path (split-string (getenv "PATH") ":")))
#+END_SRC

** Mac OS X Notification Center
#+BEGIN_SRC emacs-lisp
(defun notif (title message)
  (shell-command
   (concat
    "echo 'display notification \"'"
    message
    "'\" with title \""
    title
    "\"' | osascript"))
  )
#+END_SRC

* Add some pathes
#+BEGIN_SRC emacs-lisp
;; rbenv
(append-path "~/.rbenv/bin/")
(append-path "~/.rbenv/shims/")

;; Homebrew toka.
(append-path "/usr/local/bin")

;; golang
(setenv "GOPATH" (file-truename "~/.go"))
(append-path (concat (getenv "GOPATH") "/bin"))
(append-path "/usr/local/Cellar/go/1.3.3/bin")
#+END_SRC

* Load secret settings
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/secret.el" nil t)
#+END_SRC

* Behavior
#+BEGIN_SRC emacs-lisp
;; Emacsclient
(when (require 'server nil t)
 (unless (server-running-p)
  (server-start)))

;; Highlight current line
(global-hl-line-mode 1)

;; Disable startup message
(setq inhibit-startup-message t)

;; Open file when drag and frop files from another applications
(define-key global-map [ns-drag-file] 'ns-find-file)

;; Symply use y/n to select yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;; Don't create backup files
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)
#+END_SRC

* Appearance
#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(spaces tabs space-mark tab-mark))
(setq whitespace-display-mappings
      '(
  ;; (space-mark 32 [183] [46]) ; normal space, ·
        (space-mark 160 [164] [95])
        (space-mark 2208 [2212] [95])
        (space-mark 2336 [2340] [95])
        (space-mark 3616 [3620] [95])
        (space-mark 3872 [3876] [95])
        (space-mark ?\x3000 [?\□]) ;; Zenkaku space
        (tab-mark 9 [9655 9] [92 9]) ; tab, ▷
        ))

;; Show trailing whitespaces
(setq-default show-trailing-whitespace t)

;; Transparent window
;; (set-frame-parameter (selected-frame) 'alpha '(100 100))

;; Hide toolbar
(tool-bar-mode 0)

;; Hide scrollbar
(set-scroll-bar-mode nil)

;; (column-number-mode t)

;; Show line number
;; (global-linum-mode t)

;; Window transparency
;; (set-frame-parameter nil 'alpha 97)


;; hex color
(defvar hexcolor-keywords
  '(("#[ABCDEFabcdef0-9]\\{3,6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))

(defun hexcolor-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolor-keywords))

(add-hook 'css-mode-hook 'hexcolor-add-to-font-lock)
(add-hook 'emacs-lisp-mode-hook 'hexcolor-add-to-font-lock)


;; Show empty line marker
(setq indicate-empty-lines t)
#+END_SRC

* Language

#+BEGIN_SRC emacs-lisp
;; Use japanese
(set-language-environment 'Japanese)

;; Use UTF-8 as possible as can
(prefer-coding-system 'utf-8)
#+END_SRC

* Edit

#+BEGIN_SRC emacs-lisp
;; Save cursor position
(when (require 'saveplace' nil t)
  (setq-default save-place t))

;; Automatically insert newline
(setq require-final-newline t)

;; Tab width
(setq-default tab-width 2)
(setq default-tab-width 2)
(setq tab-stop-list '(2 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                      64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

;; enable eldoc
(when (require 'eldoc nil t)
  (eldoc-mode t)
  (setq eldoc-idle-delay 0.2)
  (setq eldoc-echo-area-use-multiline-p t))


;; Recentf file
(setq recentf-max-saved-items 100000)
(setq history-length 100000)


;; auto insert
(require 'autoinsert nil t)
(auto-insert-mode t)
(setq auto-insert-directory "~/.emacs.d/templates/")
#+END_SRC

* Font

	|----------------+------------------------------------|
	| Language       | Sample Text                        |
	|----------------+------------------------------------|
	| Japanese       | あのイーハトーヴォの               |
	|                | すきとおった風、                   |
	|                | 夏でも底に冷たさをもつ青いそら、   |
	|                | うつくしい森で飾られたモーリオ市、 |
	|                | 郊外のぎらぎらひかる草の波。       |
	| Chinese        | 祇辻飴葛蛸鯖鰯噌庖箸               |
	| English        | ABCDEFGHIJKLM                      |
	|                | abcdefghijklm                      |
	| Digit          | 1234567890                         |
	| Zenkaku Symbol | ┏┓┗┛                           |
	| Symbol         | Dingbats: [❯][☯][♞][☎]             |
	| Russian        | русский язык            |
	|----------------+------------------------------------|


  #+BEGIN_SRC emacs-lisp
(when (fboundp 'global-font-lock-mode)
  (global-font-lock-mode t)
  (setq font-lock-support-mode 'jit-lock-mode))

(create-fontset-from-ascii-font "Source Code Pro Light-14:weight=normal:slant=normal" nil "september")

;; Symbola font: http://users.teilar.gr/~g1951d/
(set-fontset-font "fontset-september" '(#x2700 . #x27BF) (font-spec :family "Symbola" :size 14) nil 'append)
(set-fontset-font "fontset-september" 'japanese-jisx0208 (font-spec :family "September" :size 14) nil 'append)
(set-fontset-font "fontset-september" 'katakana-jisx0201 (font-spec :family "September" :size 14) nil 'append) ;; hankaku kana
(add-to-list 'default-frame-alist '(font . "fontset-september"))
#+END_SRC

* Package config
** el-get
#+BEGIN_SRC emacs-lisp
;; package manager config for el-get.
;; Note that el-get depends on package.el.
(require 'package)

;;; Add MELPA repository
(add-to-list 'package-archives
 '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; Update load-path to load plugins which managed by el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

;; Install el-get if it's not installed.
(unless (require 'el-get nil t)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp)))
    (el-get-elpa-build-local-recipes)
    (el-get-emacswiki-build-local-recipes))
#+END_SRC

** evil

#+BEGIN_SRC emacs-lisp
;; Behavior
(setq evil-search-module 'evil-search)
;; Don't use emacs-state in any modes
(setq evil-emacs-state-modes nil)

(el-get 'sync 'evil)
(el-get 'sync 'evil-indent-textobject)
;; (el-get 'sync 'evil-leader)
(el-get 'sync 'evil-matchit)
(el-get 'sync 'evil-nerd-commenter)
(el-get 'sync 'evil-numbers)
(el-get 'sync 'evil-paredit)
(el-get 'sync 'evil-surround)

(when (require 'evil nil t)
      (evil-mode 1)
      ;; keymap
      (define-key evil-normal-state-map (kbd "C-h") #'(lambda ()
                    (interactive)
                    (evil-insert-state)
                    (insert-string " ")
                    (evil-normal-state)))
      (define-key evil-normal-state-map (kbd "C-l") #'(lambda ()
                    (interactive)
                    (evil-insert-state)
                    (insert-string " ")
                    (evil-normal-state)
                    (evil-forward-char)
                    ))
      (define-key evil-normal-state-map (kbd "|") 'evil-window-vsplit)
      (define-key evil-normal-state-map (kbd "_") 'evil-window-split)
      (define-key evil-motion-state-map (kbd ";") 'evil-ex)
      (define-key evil-insert-state-map (kbd "C-k") 'kill-line)
      (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)

      ;;; bind escape key to cancel or go back to normal state
      (defun evil-escape-or-quit (&optional prompt)
        (interactive)
        (cond
         ((or (evil-normal-state-p) (evil-insert-state-p) (evil-visual-state-p)
              (evil-replace-state-p) (evil-visual-state-p)) (kbd "<escape>"))
         (t (kbd "C-g"))))
      (define-key key-translation-map (kbd "s-w") #'evil-escape-or-quit)
      (define-key evil-operator-state-map (kbd "s-w") #'evil-escape-or-quit)
      (keyboard-translate ?\e ?\s-w)
      ;; (define-key key-translation-map (kbd "ESC") #'evil-escape-or-quit)
      ;; (define-key evil-operator-state-map (kbd "ESC") #'evil-escape-or-quit)


      ;; specific mode
      ;; (evil-set-initial-state 'eshell-mode 'emacs)
      ;; Fix cursor color
      (setq evil-default-cursor t)
      (set-cursor-color "#FFFFFF")
      )

(when (require 'evil-nerd-commenter nil t)
  (define-key evil-normal-state-map (kbd "C-- C--") 'evilnc-comment-or-uncomment-lines))

(when (require 'surround nil t)
      (global-surround-mode 1))

(when (require 'evil-matchit nil t)
  (global-evil-matchit-mode 1))

(when (require 'evil-elscreen nil t))
#+END_SRC

** org
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

